post_install() {
    echo -n "Updating vim help tags..."
    /usr/bin/vim --noplugins -u NONE -U NONE \
        --cmd ":helptags /usr/share/vim/vimfiles/doc" --cmd ":q" > /dev/null 2>&1
    echo "done."
    printf "$pipe2eval\n"
}

post_upgrade() {
  post_install $1
}

post_remove() {
    echo -n "Updating vim help tags..."
    /usr/bin/vim --noplugins -u NONE -U NONE \
        --cmd ":helptags /usr/share/vim/vimfiles/doc" --cmd ":q" > /dev/null 2>&1
    echo "done."
}

read -d '' pipe2eval <<'EOF'
# vim-pipe2eval-git

## Overview

simple REPL inside vim

supports: python, php, coffee, mysql, mongodb, redis, sh, go, javascript,
ruby, elixir ...

tempfiles are put to /dev/shm/ by default.

export PIP2EVAL_TMP_FILE_PATH to override.

## Key Mappings

By default, pipe2eval maps <Space> in Visual mode with:

  vmap <buffer> <Space> ':![pipe2eval dir]/plugin/pipe2eval.sh text<CR><CR>'

This mapping can be customized by setting g:pipe2eval_map_key. For example:

  let g:pipe2eval_map_key = '<Leader>p2e'

## Usage

press V<space> to evaluate current line, vip<space> to evaluate a
paragraph

to specify a diffrent filetype use the Pipe2 command :Pipe2 redis,
:Pipe2 mongo ...

evaluate an empty line will clear the context

EOF

op=$1
shift

$op $*
