post_install() {
    echo -n "Updating vim help tags..."
    /usr/bin/vim --noplugins -u NONE -U NONE \
        --cmd ":helptags /usr/share/vim/vimfiles/doc" --cmd ":q" > /dev/null 2>&1
    echo "done."
    printf "$tmuxnav\n"
}

post_upgrade() {
  post_install $1
}

post_remove() {
    echo -n "Updating vim help tags..."
    /usr/bin/vim --noplugins -u NONE -U NONE \
        --cmd ":helptags /usr/share/vim/vimfiles/doc" --cmd ":q" > /dev/null 2>&1
    echo "done."
}

read -d '' tmuxnav <<'EOF'
# vim-tmux-navigator-git complete installation instructions

Add the following to your tmux.conf file to configure the tmux side of
this customization:

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"

This configuration uses an inlined grep pattern match to help determine
if the current pane is running Vim. If you run into any issues with
the navigation not happening as expected, you can try using Mislav's
original external script which has a more robust check, here:
https://github.com/mislav/dotfiles/blob/master/bin/tmux-vim-select-pane

## Restoring Clear Screen Key Binding

The default key bindings include <Ctrl-l> which is the common key binding
for clearing the screen in interactive shells. If you want to still be
able to clear the screen, there are two main options:

1) Add an alternate key binding to your .tmux.conf to send the sequence. For
instance, to bind <prefix>-l to clear screen, add bind C-l send-keys
'C-l' to your .tmux.conf. Assuming the default setting of <prefix> =
<Ctrl-b>, this would mean that pressing <Ctrl-b> then l would act the
same as <Ctrl-l> did before using this plugin.

2) Use a different set of mappings for the navigator functionality, as
described below, to avoid conflicting with the default <Ctrl-l> behavior.

By default the script provides the following mappings:

<ctrl-h> => Left
<ctrl-j> => Down
<ctrl-k> => Up
<ctrl-l> => Right
<ctrl-\> => Previous split

If you don't want the plugin to create any mappings, you can use the four
provided functions to define your own custom maps. Add the following to
your vimrc to use custom maps:

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<cr>
nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<cr>
nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<cr>
nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<cr>
nnoremap <silent> {Previoust-Mapping} :TmuxNavigatePrevious<cr>

Note Each instance of {Left-Mapping} or {Down-Mapping} must be replaced
in the above code with the desired mapping. Ie, the mapping for <ctrl-h>
=> Left would be created with:

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
EOF

op=$1
shift

$op $*
