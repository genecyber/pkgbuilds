post_install() {
  echo "Creating symlink from /usr/share/counterparty/counterpartyd.py"
  echo "to /usr/bin/counterparty"
  ln -s /usr/share/counterparty/counterpartyd.py /usr/bin/counterpartyd
  printf "$counterparty\n"
}

post_remove() {
  rm -f /usr/bin/counterpartyd
}

read -d '' counterparty <<"EOF"
# counterparty

In order for counterpartyd to function, it must be able to communicate
with a running instance of Bitcoind or Bitcoin-Qt, which handles many
Bitcoin‐specific matters on its behalf, including all wallet and
private key management. For such interoperability, Bitcoind must be run
with the following options: -txindex=1 -server=1. This may require the
setting of a JSON‐RPC password, which may be saved in Bitcoind’s
configuration file.

counterpartyd needs to know at least the JSON‐RPC password of the
Bitcoind with which it is supposed to communicate. The simplest way to set
this is to include it in all command‐line invocations of counterpartyd,
such as ./counterpartyd.py --rpc-password=PASSWORD ACTION. To make this
and other options persistent across counterpartyd sessions, one may store
the desired settings in a configuration file specific to counterpartyd.

Note that the syntaxes for the countpartyd and the Bitcoind configuraion
files are not the same. A Bitcoind configuration file looks like this:

rpcuser=bitcoinrpc
rpcpassword=PASSWORD
testnet=1
txindex=1
server=1

However, a counterpartyd configuration file looks like this:

[Default]
bitcoind-rpc-password=PASSWORD

Note the change in hyphenation between ‘rpcpassword’ and ‘rpc-password’.

If and only if counterpartyd is to be run on the Bitcoin testnet,
with the --testnet CLI option, Bitcoind must be set to do the same
(-testnet=1). counterpartyd may run with the --testcoin option on any
blockchain, however.

The test suite is invoked with py.test.
EOF
